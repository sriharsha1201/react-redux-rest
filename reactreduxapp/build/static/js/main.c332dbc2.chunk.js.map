{"version":3,"sources":["userActions.js","userList.js","userReducer.js","rootReducer.js","index.js"],"names":["getUsers","fetch","method","then","response","Promise","all","json","FETCH_USERS_BEGIN","FETCH_USERS_SUCCESS","FETCH_USERS_FAILURE","fetchUsersBegin","type","fetchUsersSuccess","payload","fetchProductsFailure","error","UserList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","users","props","dispatch","console","log","_ref","_ref2","slicedToArray","status","_this$props","loading","react_default","a","createElement","message","map","post","firstName","React","Component","connect","products","items","initialState","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","rootReducer","applyMiddleware","thunk","rootElement","document","getElementById","ReactDOM","render","react_redux_es","className","userList"],"mappings":"4QAAA,SAASA,IAEL,OAAOC,MADK,qCACM,CAAEC,OAAQ,QACvBC,KAAM,SAAAC,GAAQ,OAAIC,QAAQC,IAAI,CAACF,EAAUA,EAASG,WAoBpD,IAAMC,EAAsB,oBACtBC,EAAsB,sBACtBC,EAAsB,sBAEtBC,EAAkB,iBAAO,CAClCC,KAAMJ,IAGGK,EAAoB,SAACC,GAAD,MAAc,CACvCF,KAAMH,EACNK,YAGKC,EAAuB,SAAAC,GAAK,MAAK,CAC1CJ,KAAMF,EACNI,QAAS,CAAEE,WCjCTC,cACF,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,MAAO,IAHDR,mFAOVG,KAAKM,MAAMC,SDJR,SAACA,GAGJ,OAFAA,EAASjB,KACTkB,QAAQC,IAAI,QAAS9B,KACdA,IAAWG,KAAK,SAAA4B,GAAqB,IAAAC,EAAAb,OAAAc,EAAA,EAAAd,CAAAY,EAAA,GAAnB3B,EAAmB4B,EAAA,GAATzB,EAASyB,EAAA,GACjB,MAApB5B,EAAS8B,OACRN,EAASf,EAAkBN,IAG3BqB,EAASb,0CCDZ,IAAAoB,EAC2Bd,KAAKM,MAA9BX,EADFmB,EACEnB,MAAOoB,EADTD,EACSC,QAASV,EADlBS,EACkBT,MAEvB,OAAIV,EACOqB,EAAAC,EAAAC,cAAA,qBAAavB,EAAMwB,SAG1BJ,EACOC,EAAAC,EAAAC,cAAA,0BAEXV,QAAQC,IAAI,OAAQJ,GAEhBW,EAAAC,EAAAC,cAAA,UAEQlB,KAAKM,MAAMD,OACXL,KAAKM,MAAMD,MAAMe,IAAI,SAACC,GAClB,OACIL,EAAAC,EAAAC,cAAA,UAAKG,EAAKC,sBA5BfC,IAAMC,WA2CdC,cANS,SAAArB,GAAK,MAAK,CAC9BsB,SAAUtB,EAAMC,MAAMsB,MACtBZ,QAASX,EAAMC,MAAMU,QACrBpB,MAAOS,EAAMC,MAAMV,QAGR8B,CAAyB7B,UC1ClCgC,EAAe,CACjBD,MAAO,GACPZ,SAAS,EACTpB,MAAO,MCNIkC,kBAAgB,CAC3BxB,MDQW,WAAmD,IAA9BD,EAA8B0B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBF,EAAcK,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9D,OAAOC,EAAO1C,MACV,KAAKJ,EAGD,OAAOW,OAAAoC,EAAA,EAAApC,CAAA,GACAM,EADP,CAEIW,SAAS,EACTpB,MAAO,OAGf,KAAKP,EAGD,OAAOU,OAAAoC,EAAA,EAAApC,CAAA,GACAM,EADP,CAEIW,SAAS,EACTY,MAAOM,EAAOxC,UAGtB,KAAKJ,EAQD,OAAOS,OAAAoC,EAAA,EAAApC,CAAA,GACAM,EADP,CAEIW,SAAS,EACTpB,MAAOsC,EAAOxC,QAAQE,MACtBgC,MAAO,KAGf,QAEI,OAAOvB,MExCb+B,EAAQC,YACVC,EACAC,YAAgBC,MAWpB,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACL5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAUV,MAAOA,GACbnB,EAAAC,EAAAC,cAXR,WACI,OACIF,EAAAC,EAAAC,cAAA,OAAK4B,UAAU,OACX9B,EAAAC,EAAAC,cAAC6B,EAAD,QAQJ,OAEJP","file":"static/js/main.c332dbc2.chunk.js","sourcesContent":["function getUsers() {\n    const URL = \"http://localhost:8080/api/v1/users\";\n    return fetch(URL, { method: 'GET'})\n        .then( response => Promise.all([response, response.json()]));\n\n}\n\n\nexport function fetchUsers() {\n    return (dispatch) => {\n        dispatch(fetchUsersBegin());\n        console.log('test5', getUsers());\n        return getUsers().then(([response, json]) =>{\n            if(response.status === 200){\n                dispatch(fetchUsersSuccess(json))\n            }\n            else{\n                dispatch(fetchProductsFailure())\n            }\n        })\n    }\n}\n\nexport const FETCH_USERS_BEGIN   = 'FETCH_USERS_BEGIN';\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS';\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE';\n\nexport const fetchUsersBegin = () => ({\n    type: FETCH_USERS_BEGIN\n});\n\nexport const fetchUsersSuccess = (payload) => ({\n        type: FETCH_USERS_SUCCESS,\n        payload\n});\n\nexport const fetchProductsFailure = error => ({\n    type: FETCH_USERS_FAILURE,\n    payload: { error }\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchUsers} from \"./userActions\";\n\n\nclass UserList extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            users: []\n        };\n    }\n    componentDidMount(){\n        this.props.dispatch(fetchUsers());\n    };\n\n    render() {\n        const {error, loading, users} = this.props;\n\n        if (error) {\n            return <div>Error! {error.message}</div>;\n        }\n\n        if (loading) {\n            return <div>Loading...</div>;\n        }\n        console.log('test', users);\n        return (\n            <ul>\n                {\n                    this.props.users &&\n                    this.props.users.map((post) =>{\n                        return(\n                            <li>{post.firstName}</li>\n                        )\n                    })\n                }\n            </ul>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    products: state.users.items,\n    loading: state.users.loading,\n    error: state.users.error\n});\n\nexport default connect(mapStateToProps)(UserList);\n","import {\n    FETCH_USERS_BEGIN,\n    FETCH_USERS_SUCCESS,\n    FETCH_USERS_FAILURE\n} from './userActions';\n\nconst initialState = {\n    items: [],\n    loading: false,\n    error: null\n};\n\nexport default function userReducer(state = initialState, action) {\n    switch(action.type) {\n        case FETCH_USERS_BEGIN:\n            // Mark the state as \"loading\" so we can show a spinner or something\n            // Also, reset any errors. We're starting fresh.\n            return {\n                ...state,\n                loading: true,\n                error: null\n            };\n\n        case FETCH_USERS_SUCCESS:\n            // All done: set loading \"false\".\n            // Also, replace the items with the ones from the server\n            return {\n                ...state,\n                loading: false,\n                items: action.payload\n            };\n\n        case FETCH_USERS_FAILURE:\n            // The request failed. It's done. So set loading to \"false\".\n            // Save the error, so we can display it somewhere.\n            // Since it failed, we don't have items to display anymore, so set `items` empty.\n            //\n            // This is all up to you and your app though:\n            // maybe you want to keep the items around!\n            // Do whatever seems right for your use case.\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error,\n                items: []\n            };\n\n        default:\n            // ALWAYS have a default case in a reducer\n            return state;\n    }\n}\n","import { combineReducers } from \"redux\";\nimport users from \"./userReducer\";\n\nexport default combineReducers({\n    users\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport UserList from './userList';\nimport rootReducer from './rootReducer';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n);\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <UserList />\n        </div>\n    );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n);\n"],"sourceRoot":""}